{"version":3,"sources":["components/serviceWorker.js","components/login/login.js","components/home/home.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","userPool","CognitoUserPool","UserPoolId","ClientId","Login","props","state","emailSignUp","passwordSignUp","emailLogIn","passwordLogIn","handleChangeEmailSignUp","bind","handleChangePasswordSignUp","handleChangeEmailLogIn","handleChangePasswordLogIn","register","login","GoToHome","event","this","setState","target","value","console","log","nameSignUp","signUp","err","data","error","alert","message","preventDefault","result","getAccessToken","getJwtToken","localStorage","setItem","history","push","authInput","Username","Password","userData","Pool","authDetails","AuthenticationDetails","CognitoUser","authenticateUser","onSuccess","onFailure","onSubmit","type","onChange","React","Component","Home","Error","App","path","component","exact","home","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9bf431b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { AuthenticationDetails, CognitoUser, CognitoUserPool, CognitoUserAttribute } from 'amazon-cognito-identity-js';\r\n\r\nconst poolData = {\r\n    UserPoolId: \"us-east-1_lVRitvsHo\",\r\n    ClientId: \"47gu5lloa7d2cbhc1ehsk5okkg\"\r\n}\r\n\r\nconst userPool = new CognitoUserPool(poolData);\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { emailSignUp: '', passwordSignUp: '', emailLogIn: '', passwordLogIn: '' }\r\n        \r\n        this.handleChangeEmailSignUp = this.handleChangeEmailSignUp.bind(this);\r\n        this.handleChangePasswordSignUp = this.handleChangePasswordSignUp.bind(this);\r\n\r\n        this.handleChangeEmailLogIn = this.handleChangeEmailLogIn.bind(this);\r\n        this.handleChangePasswordLogIn = this.handleChangePasswordLogIn.bind(this);\r\n\r\n        this.register = this.register.bind(this);\r\n        this.login = this.login.bind(this);\r\n        this.GoToHome = this.GoToHome.bind(this);\r\n    }\r\n\r\n\r\n    handleChangeEmailSignUp(event) {\r\n        this.setState({ emailSignUp: event.target.value });\r\n    }\r\n\r\n    handleChangePasswordSignUp(event) {\r\n        this.setState({ passwordSignUp: event.target.value });\r\n    }\r\n\r\n    handleChangeEmailLogIn(event) {\r\n        this.setState({ emailLogIn: event.target.value });\r\n    }\r\n\r\n    handleChangePasswordLogIn(event) {\r\n        this.setState({ passwordLogIn: event.target.value });\r\n    }\r\n\r\n    register(event) {\r\n        console.log(this.state.nameSignUp);\r\n        userPool.signUp(this.state.emailSignUp, this.state.passwordSignUp, [], null, (err, data) => {\r\n            if (err) {\r\n                console.error(err);\r\n                alert(err.message);\r\n            } else {\r\n                console.log(data);\r\n                alert('Account created ! check your email to validate your account, then come back and login.');\r\n            }\r\n        })\r\n        event.preventDefault();\r\n    }\r\n\r\n    GoToHome(result) {\r\n        console.log('access token + ' + result.getAccessToken().getJwtToken());\r\n        localStorage.setItem('cloudLearningAccessToken', result.getAccessToken().getJwtToken());\r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    login(event) {\r\n        event.preventDefault();\r\n        var authInput = {\r\n            Username : this.state.emailLogIn,\r\n            Password : this.state.passwordLogIn \r\n        }\r\n        var userData = {\r\n            Username: this.state.emailLogIn,\r\n            Pool: userPool\r\n        }\r\n        var authDetails = new AuthenticationDetails(authInput);\r\n        var user = new CognitoUser(userData);\r\n        user.authenticateUser(authDetails, {\r\n            onSuccess: this.GoToHome,\r\n        \r\n            onFailure: function(err) {\r\n                console.log(err);\r\n                alert(err.message);\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.register}>\r\n                    <h4>Sign up</h4>\r\n                    <input type='text' value={this.state.emailSignUp} onChange={this.handleChangeEmailSignUp} />\r\n                    <input type='password' value={this.state.passwordSignUp} onChange={this.handleChangePasswordSignUp} />\r\n                    <button>Sign up</button>\r\n                </form>\r\n                <form onSubmit={this.login}>\r\n                    <h4>Log In</h4>\r\n                    <input type='text' value={this.state.emailLogIn} onChange={this.handleChangeEmailLogIn} />\r\n                    <input type='password' value={this.state.passwordLogIn} onChange={this.handleChangePasswordLogIn} />\r\n                    <button>Log In</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport login from \"./components/login/login\";\r\nimport home from \"./components/home/home\";\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div>\r\n            <p>Error</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" component={login} exact />\r\n                <Route path=\"/home\" component={home} exact />\r\n                <Route component={Error} />\r\n            </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './components/serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}